react 中的key作用
    简单结构下不带key会就地复用，会更快 但会有副作用导致组建状态混乱
    key的作用为消除就地复用带来的副作用  在diff对比时更快的找到旧节点(不带key是遍历 带key是map)

['1', '2', '3'].map(parseInt) what & why ?
    1 NaN NaN
    '1' 0 十进制 1
    '2' 1 一进制 NaN
    '3' 2 二进制 NaN

let unary = fn => val => fn(val)
let parse = unary(parseInt)
console.log(['1.1', '2', '0.3'].map(parse))  // [1,2,0]

防抖跟节流?
 防抖 只会触发一次
 function debounce(method,delay){
    var timer = null
    return function (){
        var self = this
        var args = arguments
        timer && clearTimeout(timer)
        timer = setTimeout(function(){
            method.apply(self,args)
        },delay)
    }
 }
 节流 每搁一段时间触发一次
 function throttle(method,delay){
     return function (){
         var now = new Date()
         var self = this
         var args = arguments
         if(!start){
             start = new Date()
         }
         timer && clearTimeout(timer)
         if(now - start >= delay){
             method.apply(self,args)
         }else{
            timer = setTimeout(function () {
                loop.apply(self, args);
            }, 50);
         }
     }
 }

 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？
    Set 是以[value,value] 储存的 类似于数组，但成员是唯一且无序的，没有重复的值。 add delete has clear size  keys values entries 
    WeakSet 只能储存对象引用  add has delete
    Map  是以[key,value]储存的 是 值-值的对应 而对象是是将所有的key都转为字符串 是字符串-值得对应  set get delete has clear size  keys values entries 
    WeakMap 只接受对象作为键名（null除外） 防止内存泄露

介绍下深度优先遍历和广度优先遍历，如何实现？
    深度优先 对象深拷贝
    function deep(node,list=[]){
        if(node){
            list.push(node)
            for(let i = 0; i < node.children.length; i++){
                deep(node.children,list)
            }
        }else{
            return list
        }
    }
    广度优先
    function bfs(node){
        let result = []
        let stack = []
        if(node){
            stack.push(node)
            while(stack.length){
                let item = stack.shift()
                result.push(item)
                for(i = 0; i < item.children.length; i++){
                    stack.push(item.children[i])
                }
            }
        }
        return result
    }

ES5/ES6 的继承除了写法以外还有什么区别？
    继承的区别
    function father{}
    function son{}
    son.prototype = new father()
    son.prototype.constructor = father
    son.__proto__ == Function.prototype
    -----
    class father{}
    class son extends father{}
    son.__proto__ == father

    class 内部使用严格模式
    class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。
    const bar = new Bar(); // it's ok
        function Bar() {
        this.bar = 42;
    }

    const foo = new Foo(); // ReferenceError: Foo is not defined
    class Foo {
        constructor() {
            this.foo = 42;
        }
    }
    class 所有方法都是不可枚举的
    class 不携带new会报错
    class 不可在内部重写类名

setTimeout Promise Async/Await
    setTimeout 进入event loop 队列
    promise 进入主线程的微任务里
    async 返回promise 遇到await就等待返回 类似co genarator
    {
        console.log('start')
        let promise1 = new Promise(function (resolve) {
            console.log('promise1')
            resolve()
            console.log('promise1 end')
        }).then(function () {
            console.log('promise2')
        })
        setTimeout(function(){
            console.log('settimeout')
        })
        console.log('end')
    } 
    start--promise1--promise1 end--end--promise2--settimeout
    {
        async function async1(){
            console.log('async1 start');
            await async2();
            console.log('async1 end')
        }
        async function async2(){
            console.log('async2')
        }

        console.log('script start');
        async1();
        console.log('script end')
    }
    script start--async1 start--async2--script end--async1 end
    {
        setTimeout(() => console.log(1));
        setImmediate(() => console.log(2));
        process.nextTick(() => console.log(3));
        Promise.resolve().then(() => console.log(4));
        (() => console.log(5))();
    }
    5--3--4--1--2 
    {
        const fs = require('fs');
        const timeoutScheduled = Date.now();

        // 异步任务一：100ms 后执行的定时器
        setTimeout(() => {
            const delay = Date.now() - timeoutScheduled;
            console.log(`${delay}ms`);
        }, 100);

        // 异步任务二：文件读取后，有一个 200ms 的回调函数
        fs.readFile('test.js', () => {
            const startCallback = Date.now();
            while (Date.now() - startCallback < 200) {
                // 什么也不做
        }
        });
    }
    log(200+ms)

Async/Await 如何通过同步的方式实现异步
    类似co genarator

异步问题
    {
        async function async1() {
            console.log('async1 start');
            await async2();
            console.log('async1 end');
        }
        async function async2() {
             new Promise(function(resolve) {
                console.log('promise1');
                resolve();
            }).then(function() {
                console.log('promise2');
                });
        }
        console.log('script start');
        setTimeout(function() {
            console.log('setTimeout');
        }, 0)
        async1();
        new Promise(function(resolve) {
            console.log('promise3');
            resolve();
        }).then(function() {
            console.log('promise4');
        });
        console.log('script end');
    }
    script start--async1 start--promise1--promise3--script end--promise2--assync1 end--promise4-setTimeout
    会把await后面的放入微任务队列 但promise中的resulve()后面的是属于宏任务
    宏任务 script start--async1 start--promise1--promise3--script end
    微任务 promise2--assync1 end--promise4

var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];
编写一个程序将数组扁平化去并除其中重复部分数据，最终得到一个升序且不重复的数组
    [...new Set(arr.flat(Infinity))].sort((a,b)=>a-b)
    数组扁平化
    arr.flat
    arr.toString().split(',')
    递归实现
    flatDeep1 = array => array.reduce((acc, cur) => (Array.isArray(cur) ? [...acc, ...flatDeep1(cur)] : [...acc, cur]), [])
    迭代实现
    function flat(arr){
        const stack=[...arr]
        const res = []
        while(stack.length){
            let item=stack.pop()
            if(Array.isArray(item)){
                stack.push(item)
            }else{
                res.push(item)
            }
        }
        return res
    }

JS 异步解决方案的发展历程以及优缺点
    回调函数  promise(链式调用 无法取消)  genarater async/await
    let a = 0
    let b = async () => {
    a = a + await 10
    console.log('2', a) 
    }
    b()
    a++
    console.log('1', a) 
     1 1
     2 10

Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？
    构造函数同步 then放到微任务里 等待主线程任务执行完后再执行

如何实现一个 new
    function _new(fn,...args){
        // 创建一个新对象
        // 对象的__proto__指向构建函数的prototype
        const newObj = Object.creat(fn.prototype)
          // 执行代码时候, 绑定this指向新的对象
        const res = fn.apply(newObj,args)
         // 如果构造函数有返回值, 返回构造函数的值, 否则返回新对象
        return Object.prototype.toString.call(res) === '[object Object]' ? res : newObj
    }

简单讲解一下http2的多路复用
    http1 每次请求都会建立一个http连接 
    http2 的多路复用同域名下所有的通信都在单个连接上完成 
    http2中的帧跟流 
    帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。
    多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。
    通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。

谈谈你对 TCP 三次握手和四次挥手的理解
    三次握手
    为了保证客户端 服务端 均让对方知道收发能力没问题
    为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的ACK都会对这个seq进行加一来进行确认
    四次挥手
    A=>B
    B=>A
    B=>A
    A=>B
    当A告诉B，要关闭的时候，B可能还有一个包正在传输中，所以是等正在传输中的这个包传输完毕之后再回复A一下，
    由于TCP连接是全双工的，因此每个方向都必须单独进行关闭，所以即使没有最后一个包，也需要先回复断开连接的请求，然后再发送关闭请求

React 中 setState 什么时候是同步的，什么时候是异步的？
    在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，
    除此之外的setState调用会同步执行this.state。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事
    件处理函数，还有通过setTimeout/setInterval产生的异步调用。
    **原因：**在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列
    中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数
    batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个
    batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。

 this.setState({val: this.state.val + 1});
    console.log(this.state.val);    // 第 1 次 log

    this.setState({val: this.state.val + 1});
    console.log(this.state.val);    // 第 2 次 log

    setTimeout(() => {
      this.setState({val: this.state.val + 1});
      console.log(this.state.val);  // 第 3 次 log

      this.setState({val: this.state.val + 1});
      console.log(this.state.val);  // 第 4 次 log
    }, 0);

    react中 0 0 2 3
    preact中 1 2 3 4

介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？
    根据package.json里的dependencies和devdependencies确定首层依赖
    递归获取模块信息
    扁平化去除重复模块 重复模块有兼容版本就是用兼容版本
    向registry查询下载地址
    下载压缩包放到.npm 里
    解压到node_modules

Object.prototype.toString.call() 、 instanceof 以及 Array.isArray() 区别
    toString 是Array.isArray的polyfill
    instanceof是根据原型链来判断的 会判断这个对象的原型链上是否会找到对应的 Array 的原型 会有iframe 不一致的问题

介绍下重绘和回流（Repaint & Reflow），以及如何进行优化
    repaint 不会影响布局的 改变颜色
    reflow 影响页面布局的 或者获取布局信息（width offsetwidth scrolltop getcomputedstyle()） 
    因为浏览器通过队列机制来批量更新 会把待修改的放在队列中 一个更新周期(16.6ms)才会更新 当获取布局信息时 队列中有
    些操作可能会影响要获取的布局信息 所以会强制触发一次回流
    优化
    能用重绘就重绘
    少用.style.xx  合并为 el.style.cssText += 'border-left: 1px; border-right: 2px; padding: 5px;';
    避免频繁操作样式 dom 读取布局信息  
    使用document fragment

介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景
    观察者模式是观察者跟被观察者直接相关联的 addeventlistener 就属于观察者模式 js跟dom绑定 vue的双向绑定
    class Subject{
    constructor(){
        this.subs = [];
    }
    addSub(sub){
        this.subs.push(sub);
    }
    notify(){
        this.subs.forEach(sub=> {
            sub.update();
            });
        }
    }
    class Observer{
        update(){
            console.log('update');
        }
    }
    let subject = new Subject();
    let ob = new Observer();
    //目标添加观察者了
    subject.addSub(ob);
    //目标发布消息调用观察者的更新方法了
    subject.notify();   //update
    订阅-发布模式 比观察者模式中间多了一层对象 用来订阅 发布 event.on event.emit 通过event来发布订阅 
    订阅者 发布者不知晓对方的存在
    var pubsub = (()=>{
    var topics = {};
    function subscribe(topic,fn){
        if(!topics[topic]){
        topics[topic] = [];  
        }
        topics[topic].push(fn);
    }
    function publish(topic,...args){
        if(!topics[topic])
        return;
        for(let fn of topics[topic]){
        fn(...args);  
        }
    }
    return {
        subscribe,
        publish
    }
    })()
    pubsub.subscribe('test',function(a,b){  //订阅者A订阅了test事件
    console.log(a,b);    
    });
    pubsub.publish('test','123','HH'); //发布者发布了了test事件

redux跟vuex设计思想
    相同点 都是处理全局状态的库 全局state=>dispatch(action)=>reducer=>新state
    不同点 异步处理不同 redux需要通过中间件

浏览器和Node 事件循环的区别
    差异体现在node V10之前
    浏览器是执行完一个宏任务就会去清空微任务队列；node则是将同源的宏任务队列执行完毕后再去清空微任务队列
    node V11 以后行为跟浏览器一致

介绍模块化发展历程
    commonjs  生成一个对象
    通过require去引用文件时，会将文件执行一遍后，将其执行结果通过浅克隆的方式，写入全局内存。后续再require
    该路径，就直接从内存里取出，不需要重新执行对应的文件
    es6 暴露出的是代码块 
    ES6的模块机制在依赖模块时并不会先去预加载整个脚本，而是生成一个只读引用，并且静态解析依赖，等到执行代码时，
    再去依赖里取出实际需要的模块
    CommonJS运行时加载，ESModule编译阶段引用
    amd 
    异步加载
    cmd
    异步加载 会在回调函数中执行具体的依赖语句时才加载

全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？
    es5中 顶层对象跟全局变量是等价的
    es6中 这是属于块级作用域 跟顶级对象是分开的 在一个block中 直接获取

cookie 和 token 都存放在 header 中，为什么不会劫持 token
    xss 通过脚本获取用户信息
    csrf 内嵌img src是银行的转账信息 如果刚访问过银行 保留cookie的话 则会csrf成功
    CSRF攻击的原因是浏览器会自动带上cookie，而浏览器不会自动带上token
    
请把两个数组 ['A1', 'A2', 'B1', 'B2', 'C1', 'C2', 'D1', 'D2'] 和 
['A', 'B', 'C', 'D']，合并为 ['A1', 'A2', 'A', 'B1', 'B2', 'B', 'C1', 'C2', 'C', 'D1', 'D2', 'D']
    1 function combineArr(a1, a2) {
        const ret = a2.map((item, index) => {
            return [a1[index * 2], a1[index * 2 + 1], item]
        })
        return ret.toString().split(',')
    }
    2 const res = ["A", "B", "C", "D"].reduce(
        (memo, item) => {
            const tmp = [...memo].reverse();
            const idx = memo.length - tmp.findIndex(i => i.startsWith(item)) - 1;

            return [...memo.slice(0, idx + 1), item, ...memo.slice(idx + 1)];
        },
        ["A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2"]
        );

输出0-9 所有写法
for (var i = 0; i< 10; i++){
	setTimeout(() => {
		console.log(i);
    }, 1000)
}
    1 let
    2 setTimeout传入第三个参数及以后的会当作回调函数的参数使用
    for (var i = 0; i< 10; i++){
        setTimeout((i) => {
            console.log(i);
        }, 1000,i)
    }
    3 闭包
    for (var i = 0; i< 10; i++){
       ((i) => {
        setTimeout(() => {
            console.log(i);
            }, 1000)
        })(i)
    }

下面函数打印什么?
var b = 10
(function b(){
    b = 20;
    console.log(b); 
})(); 
    function b(){
        b = 20;
        console.log(b); 
    }
    内部是立即执行的具名函数表达式 变量为只读属性，不可修改 严格模式会报错Assignment to constant variable
    var b = 10;
    (function b() {
        var b = 20; // IIFE内部变量
        console.log(b); // 20
        console.log(window.b); // 10 
    })();

浏览器缓存读取规则 以及储存四个位置
    强缓存 
    不会向服务器发请求 直接从缓存中获取 
    Expires 指定资源过期时间 修改本地时间会失效 http1
    Cache-Control 有不同的属性来控制缓存 如max-age xxx秒后失效 no-chache 使用协商缓存 不使用 Cache-Control http1.1
    Cache-Control优先级高于Expires
    协商缓存
    会请求服务器 由服务器判断是否使用缓存 返回304使用缓存 200不使用直接用新的
    服务端返回Last-Modified 下次请求会带上If-Modified-Since 服务端会判断  本地改文件不会刷新
    服务端返回ETag 请求带上If-None-Match 是文件的唯一标识 解决last-modified问题 
    etag优先级高于last 但性能不如
    强缓存优先级高于协商缓存
    应用 
    频繁变动的资源 Cache-Control: no-cache 每次由服务器决定使不使用缓存
    不常变化的资源 Cache-Control: max-age=31536000 如果想使用改变uri 文件hash 等冬天字符
    四个位置
    Service Worker 是运行在浏览器背后的独立线程 传输协议必须为 HTTPS
    Memory Cache 内存中 速度快 关闭页面后清除
    Disk Cache 硬盘 
    Push Cache 会话中
    对于大文件来说，大概率是不存储在内存中的，反之优先
    当前系统内存使用率高的话，文件优先存储进硬盘

为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？
    reducer 是唯一更改state的地方 必须是纯函数 异步操作结果不可预测 有副作用

var a = ?;
if(a == 1 && a == 2 && a == 3){
 	console.log(1);
}
    a={
        i,
        toString:()=>{
            return this.i+1
        }
    }
    let a = [1,2,3];
    a.toString = a.shift;

介绍下 BFC 及其应用
    块级格式化上下文
    生成条件 
    display inline-block flex table-cells
    float除none外
    绝对定位 absolute fiexd
    overflow 除visible外的 
    display:flow-root  新的属性 为bfc准备的
    作用
    两个bfc解决元素塌陷
    里外元素互不影响
    清除浮动 
    防止文字环绕

子组件为何不可以修改父组件传递的 Props
    保证数据源唯一
    数据单向流动的

var a = 10;
(function () {
    console.log(a)
    a = 5
    console.log(window.a)
    var a = 20;
    console.log(a)
})()
    undefined 10 20 
(function () {
    console.log(a)
    a = 5
    console.log(window.a)
    console.log(a)
})()
    10 5 5

实现一个 sleep 函数
    function sleep(){
        return new Promise(function(resolve,reject){
            setTimeout(()=>resolve(),1000)
        })
    }
    sleep().then(()=>{xxxxx})

使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果
    直接sort 102 15 22 29 3 8 默认会将数组元素转为字符串 
    arr.sort((a,b)=>a-b)

HTTPS 握手过程中，客户端如何验证证书的合法性
    http通信是明文 会被中间人拦截
    需要传递一个密钥进行对称加密 直接传递还是会拦截
    服务端把自己公钥发给客户端 客户端用发来的公钥加密对称密钥 服务端用私钥解密对称密钥   中间人用自己的公私钥也可以获取到对称密钥
    服务端把自己公钥以及自己的信息交给CA CA将这些信息hash 生成数字签名并用自己私钥加密 交互的时候 
    服务端将证书给客户端 客户端用证书的CA信息 域名信息 过期时间等判断证书是不是服务端颁发的 然后用CA公钥解密签名 
    然后将证书信息hash 看是否跟解密签名一致 证明证书是否被修改
    为何CA不直接把证书信息私钥加密而是明文+签名形式 因为颁发CA的公司很多

var obj = {
    '2': 3,
    '3': 4,
    'length': 2,
    'splice': Array.prototype.splice,
    'push': Array.prototype.push
}
obj.push(1)
obj.push(2)
console.log(obj)
    类数组对象 [empty × 2, 1, 2, splice: ƒ, push: ƒ]
    push方法具有通用性 会在obj.length处进行操作 
    obj['2']=1 并改变length 
    obj['3']=3 并改变length
    控制台对类数组的定义为有length且>0且有splice方法

call apply 区别 哪个性能更好
    apply 参数是数组
    call  后面的参数都会传入
    call性能好 参数直接使用 apply还有一个将数组参数转化的过程
    
为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？
    跨域问题 （不直接用get post的原因）
    执行过程无阻塞（不用请求文件方法的原因 ）
    是一次完整的网络请求 
    小（不用png的原因）

实现 (5).add(3).minus(2) 功能 
    Number.prototype.add=function(count){
        return this+count
    }
    Number.prototype.minus=function(count){
        return this-count
    }

div水平居中
    flex
    position absolute top right tansform:translate(-50%,-50%)

var a = {n: 1};
var b = a;
a.x = a = {n: 2};
console.log(a.x)
console.log(b.x)
    undefined
    {n:2}
    .的优先级高于= 先执行a.x=undefined 此时的a是{n:1,x:undefined}
    =从右至左执行  a指向新的地址{n:2} {n:1}.x也指向{n:2}
    最后新a为{n:2} b为{n:1,x:{n:2}}

冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？
    function bubbleSort(arr){
        for(var i = 0; i < arr.length; i++){
            for(var j = i; j < arr.length; j++){
                if(arr[i] < arr[j]){
                    var temp = arr[i]
                    arr[i] = arr[j]
                    arr[j] = temp
                }
            }
        }
        return arr
    }

如下：{1:222, 2:123, 5:888}，
请把数据处理为如下结构：[222, 123, null, null, 888, null, null, null, null, null, null, null]   
    function trans(obj){
        let res = []
        for(i = 0; i < 12; i++){
            obj[i]?arr.push(obj[i]):arr.push(null)
        }
        return res
    }

要求设计 LazyMan 类，实现以下功能。
azyMan('Tony');
// Hi I am Tony

LazyMan('Tony').sleep(10).eat('lunch');
// Hi I am Tony
// 等待了10秒...
// I am eating lunch

LazyMan('Tony').eat('lunch').sleep(10).eat('dinner');
// Hi I am Tony
// I am eating lunch
// 等待了10秒...
// I am eating diner

LazyMan('Tony').eat('lunch').eat('dinner').sleepFirst(5).sleep(10).eat('junk food');
// Hi I am Tony
// 等待了5秒...
// I am eating lunch
// I am eating dinner
// 等待了10秒...
// I am eating junk food
    function LazyMan(){
        class Man{
            constructor(name){
                this.task = []
                console.log('Hi I am ' + name)
                return this
            }
            doNext=()=>{
                let item = this.task.shift()
                item && item()
            }
            eat = (type) => {
                this.task.push(()=>{
                    console.log('i am eating' + type)
                })
            }
            _sleep = (timer) => {
                return new Promise((resolve,reject)=>{
                    setTimeout(()=> {
                        resolve()
                    },time)
                })
            }
            sleep = (time) => {
                this.task.push(()=>{
                    this._sleep(time).then(()=> {
                        console.log('等了'+time+'秒')
                        this.next()
                    })
                })
                return this
            }
            sleepFirst = (time) => {
                this.task.unshift(()=>{
                    this._sleep(time).then(()=> {
                        console.log('等了'+time+'秒')
                        this.next()
                    })
                })
                return this
            }

        }
        return new Man(name)
    }

分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景
    display     重绘    不占据页面空间  不可点击    非继承属性
    visibility  回流    占据           不可点击    继承
    opacity     回流    占据           可以点击    非继承属性