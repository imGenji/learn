重绘 repaint  回流 reflow
重绘 改变颜色之类
回流 改变集合属性 引发重建的过程 获取offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、 clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle()  改变margin等 集合属性变化 resize事件等

前后端分离
 前端html页面通过ajax 访问后台服务器 通过json进行数据交互

http 状态码
 2** 成功
3** 重定向 301 永久重定向 302 临时重定向 304 not modidied 未修改 
4**客户端错误 401 Unauthorized 验证身份 403 forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求
5**服务端错误 500 Internal Server Error 内部错误 502 bad gateway 错误网关

网络分层模型
实体层  将电脑链接起来 传输的01信号
链接层  以太网协议 mac地址 通过arp协议 广播的形式 只能同一个子网络接受
网络层  引入ip地址 区分计算机是否处于同一个子网络 用子网掩码区分出网络部分和主机部分 主机到主机
传输层  端口到端口的通信 tcp协议   \\\\
应用层  规定email ftp 网页等的格式

ajax 用promise实现
function ajaxPromise(url,mothed){
 return new Promise( (resolve, reject) => {
	var xhr = new XMLHttpRequest();
	 xhr.open(mothed, url, true);
	if(mothed == 'post')
	xhr.onreadystatechange = function(){
		if(this.readyState == 4){
               
			 if(this.status = 200){
                    
				resolve(this.responseText, this)
                
			}else{
                    
				var resJson = { code: this.status, response: this.response }
                    
				reject(resJson, this)    
            
			    }

	}
	 xhr.send() 
})
}
ajaxPromise('get','xxx/xxx').then(value =>{//xxx}).catch(err=>{//xxx})

深克隆
function deepcopy(obj){
	if(typeof obj == 'object'){
		var res =obj.constructor == Array ? [] : {};
 		 for(let i in obj){
         		   result[i] = typeof obj[i] == "object" ? deepCopy(obj[i]) : obj[i];
      		  }
	}else {
    		    var result = obj;
   	 }
    		return result;
}

事件绑定方式
     dom元素直接绑定 到js中绑定 onXXX
     事件监听函数addeventlistener 第三个参数是true 捕获阶段  false 冒泡

rem em 单位
   最终都会被浏览器转为px  rem 根据叶根元素字体的大小 em根据继承来的字体大小

盒模型
  标准盒模型  width是content的width  
  怪异盒模型（ie盒模型） width 是content + padding + border

bfc 格式化上下文
   相当于一个独立的渲染区域 
   形成条件
      1、浮动元素，float 除 none 以外的值； 
      2、定位元素，position（absolute，fixed）； 
      3、display 为以下其中之一的值 inline-block，table-cell，table-caption； 
      4、overflow 除了 visible 以外的值（hidden，auto，scroll）；
      5, display:flow-root  新的属性 为bfc准备的
      
作用
	bfc区域不会与block区域重叠 自适应布局 阻止元素被浮动元素覆盖（防止文字环绕）
	计算时内部的float元素爷计算入内 清除浮动 
	因为bfc内部也会发生margin重叠 因此生成两个bfc  防止边距塌陷     
总结 	BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。
   

box-sizing 
    content-box width height 是按content的来进行计算的 （默认值）
    border-box width height 是按content+padding+border来计算的

css元素选择器 
   id class 标签 通配符(*) 属性 伪类 伪元素 子元素 兄弟元素

position relative/absolute/fix 相对于谁进行定位的
	static 默认值没有定位
	absolute 相对于第一个不是static的父元素
	relative 相对于在普通文档流中的位置
	
css3 新属性
	border-radius border-shadow border-image
	background size origin(定位区域 content-box border-box) 
	text text-shadow 
	transform
	animation

html 
	新语义标签 新input输入类型 表单属性 音频视频 canvas绘图 定位 拖放 web worker(多线程)  web storge web socket  	

visibility:hidden display:none 区别
	display会在dom中完全消失 从none变为block会引发回流
	visibility则不会

css > 直接子类   +相邻的后面一个同级元素   ~相邻后面所有的同级元素

标准模式 怪异模式 
标准模式 按照w3c标准执行代码 有<!DOCTYPE html>
怪异模式 按照浏览器自己的规则解析执行代码 没有<!DOCTYPE html>

bom 对象 
  window navigator screen history location 

react diff 算法 
  virtual 只会比较同级的的dom节点 o(n) 传统的diff算法会都比较 o(n3)  
  节点类型不一样时直接删除建一个新的
  类型 属性都相同时 用到key来进行移动

react 生命周期 
  首次渲染 getDefaultProps getInitialState componenntWillMount render componentDidMount
 第二次渲染 getInitialState componenntWillMount render componentDidMount
 新props componentWillReceiveProps shouldComponentUpdate componentWillUpdate render componentDidUpdate 
 新state shouldComponentUpdate componentWillUpdate render componentDidUpdate 
 卸载 componentWillUnmount

数据的双向绑定
 手动绑定 事件监听 input change事件等
 脏检查  数据变化遍历所有的watcher
 数据劫持 用Object.defineProperty 的set get

react 中为何要使用key
 为了diff算法更快的找到老的节点 有key可以通过map对比 没有的话会通过遍历对比
 在更新组件的时候判断两个节点是否相同 相同就复用 不然就删掉然后创建新的 
 避免原地复用带来的副作用（不会有过渡效果，状态错位）

react中的shouldComponentUpdate shallowEqual浅比较实现
is 对基本类型作比较 
用is不用===的原因
全等无法对 NaN +0 -0 做判断
NaN === NaN false 希望为true 
+0 === -0 true 希望为false

function is(a,b){
	if(a === b){
		return a !== 0 || 1/a === 1/b
	}else{
		return a !== a && b !==b 
	}
}
  
function shallowEqual(a,b){
	
}


